import time
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

keys = [
    [0x0b, 0xf4, 0xdd, 0x5c, 0x3f, 0x7b, 0x37, 0x1b, 0x73, 0xb4, 0xcb, 0x50, 0x58, 0xd6, 0x9c, 0x78, 0x5d, 0x80, 0xb6, 0x89, 0x8f, 0xbb, 0x46, 0xf0, 0x7d, 0x15, 0x7a, 0x07, 0x2f, 0x1b, 0x86, 0xf9],
    [0xc9, 0xc6, 0x3d, 0x53, 0xca, 0x25, 0xac, 0x28, 0x4f, 0xfc, 0x9b, 0xf3, 0x86, 0xac, 0x1f, 0x1a, 0x81, 0x20, 0x1a, 0x96, 0x86, 0x06, 0x04, 0x9f, 0x50, 0x7e, 0x27, 0xa6, 0x34, 0xc4, 0x0f, 0x97],
    [0x27, 0xd1, 0xe2, 0x04, 0x51, 0xa8, 0x00, 0xbb, 0x99, 0xc1, 0xd0, 0xd1, 0xe9, 0x7f, 0x54, 0xcc, 0xe8, 0xef, 0x6a, 0x5d, 0x62, 0x5a, 0x67, 0x95, 0xb5, 0x8e, 0x83, 0x87, 0x16, 0x2b, 0x3c, 0xbf],
    [0xed, 0xd1, 0x06, 0xe7, 0xb9, 0xe4, 0x17, 0x7b, 0x73, 0x40, 0xea, 0xbc, 0x7b, 0xa8, 0x1d, 0xef, 0x11, 0x63, 0xea, 0x1e, 0x4f, 0xb9, 0x3c, 0xed, 0xa4, 0x88, 0xf5, 0x9a, 0x68, 0x91, 0x74, 0x8f],
    [0x7a, 0xbd, 0xf7, 0xc5, 0xc1, 0xcb, 0x68, 0xd9, 0x00, 0x73, 0x17, 0xbf, 0x7d, 0xc5, 0xf6, 0xcd, 0x6f, 0x12, 0x38, 0xd7, 0xa3, 0x7f, 0x61, 0x17, 0x5a, 0x50, 0x0e, 0x06, 0x72, 0xc2, 0x92, 0xa2],
    [0xce, 0xd0, 0x92, 0x3d, 0x42, 0x47, 0x91, 0xc3, 0xc6, 0x8e, 0x81, 0x0a, 0xa0, 0xf8, 0xf1, 0xa0, 0xca, 0x0a, 0xe8, 0x30, 0xe4, 0x23, 0x6a, 0x76, 0xc3, 0xbd, 0x93, 0x36, 0xd6, 0x6a, 0x43, 0x7e],
    [0xbb, 0x8e, 0x50, 0x3e, 0x18, 0xfd, 0x70, 0xa1, 0xb6, 0xfe, 0x1a, 0x36, 0xa0, 0x50, 0xb7, 0x19, 0x70, 0x1f, 0x39, 0x6d, 0xc9, 0x7c, 0x79, 0x4e, 0x52, 0x0e, 0x07, 0x67, 0xab, 0x70, 0xcb, 0x4d],
    [0x22, 0xc2, 0x61, 0xf1, 0x4e, 0x97, 0xbd, 0x4b, 0x5f, 0x2b, 0x9b, 0x60, 0xb5, 0x52, 0xa9, 0x7d, 0xf0, 0xa3, 0xc0, 0xc0, 0xd1, 0x6c, 0x19, 0x5a, 0xdd, 0x38, 0x8f, 0xc0, 0x98, 0x12, 0x5a, 0x08],
    [0x0e, 0xe2, 0xc7, 0x37, 0x9d, 0x70, 0xcf, 0x45, 0xcf, 0x60, 0xd2, 0xff, 0x54, 0x74, 0xbd, 0x96, 0x3c, 0x7b, 0xf6, 0xc1, 0xb4, 0x0a, 0xe6, 0xcc, 0xc6, 0xe7, 0xab, 0x04, 0x13, 0x2a, 0xe5, 0x06],
    [0x7a, 0x9a, 0xcd, 0x44, 0x8b, 0x37, 0x0f, 0x8c, 0x6a, 0x5b, 0xba, 0xad, 0x65, 0x1b, 0xae, 0xd6, 0x73, 0x05, 0xf4, 0xeb, 0xf7, 0x24, 0x3f, 0x53, 0x51, 0xbf, 0x55, 0x53, 0x1d, 0x3e, 0xe6, 0x9f]
]

enclave_signature_iv = [
    [0xac, 0x5d, 0x68, 0xb8, 0x79, 0x74, 0xfc, 0x7f, 0x45, 0x02, 0x82, 0xf1, 0x48, 0x7e, 0x75, 0x8a],
    [0x38, 0xe6, 0x6a, 0x90, 0x5e, 0x5b, 0x8a, 0xa6, 0x70, 0x30, 0x04, 0x72, 0xc2, 0x42, 0xea, 0xaf],
    [0x73, 0xd5, 0x8e, 0xfb, 0x0f, 0x4b, 0xa9, 0x79, 0x0f, 0xde, 0x0e, 0x53, 0x44, 0x7d, 0xaa, 0xfd],
    [0x3c, 0x9a, 0xf4, 0x43, 0x2b, 0xfe, 0xea, 0xae, 0x8c, 0xc6, 0xd1, 0x60, 0xd2, 0x96, 0x64, 0xa9],
    [0x10, 0xac, 0x7b, 0x63, 0x03, 0x7f, 0x43, 0x18, 0xec, 0x9d, 0x9c, 0xc4, 0x01, 0xdc, 0x35, 0xa7],
    [0x26, 0x21, 0x64, 0xe6, 0xd0, 0xf2, 0x47, 0x49, 0xdc, 0x36, 0xcd, 0x68, 0x0c, 0x91, 0x03, 0x44],
    [0x7a, 0xbd, 0xce, 0x9c, 0x24, 0x7a, 0x2a, 0xb1, 0x3c, 0x4f, 0x5a, 0x7d, 0x80, 0x3e, 0xfc, 0x0d],
    [0xcd, 0xdd, 0xd3, 0x02, 0x85, 0x65, 0x43, 0x83, 0xf9, 0xac, 0x75, 0x2f, 0x21, 0xef, 0x28, 0x6b],
    [0xab, 0x73, 0x70, 0xe8, 0xe2, 0x56, 0x0f, 0x58, 0xab, 0x29, 0xa5, 0xb1, 0x13, 0x47, 0x5e, 0xe8],
    [0x4f, 0x3c, 0x43, 0x77, 0xde, 0xed, 0x79, 0xa1, 0x8d, 0x4c, 0x1f, 0xfd, 0xdb, 0x96, 0x87, 0x2e],
]

enclave_signature_input = [
    [0x9f, 0x5c, 0xb1, 0x43, 0x17, 0x53, 0x18, 0x8c, 0x66, 0x3d, 0x39, 0x45, 0x90, 0x13, 0xa9, 0xde],
    [0xc5, 0x98, 0xe9, 0x17, 0xb8, 0x97, 0x9e, 0x03, 0x33, 0x14, 0x13, 0x8f, 0xce, 0x74, 0x0d, 0x54],
    [0x34, 0xba, 0x99, 0x59, 0x9f, 0x70, 0x67, 0xe9, 0x09, 0xee, 0x64, 0x0e, 0xb3, 0xba, 0xfb, 0x75],
    [0xdc, 0xfa, 0x6c, 0x9a, 0x6f, 0x0a, 0x3e, 0xdc, 0x42, 0xf6, 0xae, 0x0d, 0x3c, 0xf7, 0x83, 0xaf],
    [0xea, 0x2d, 0xe3, 0x1f, 0x02, 0x99, 0x1a, 0x7e, 0x6d, 0x93, 0x4c, 0xb5, 0x42, 0xf0, 0x7a, 0x9b],
    [0x53, 0x5e, 0x04, 0xa2, 0x49, 0xa0, 0x73, 0x49, 0x56, 0xb0, 0x88, 0x8c, 0x12, 0xa0, 0xe4, 0x18],
    [0x7d, 0xa7, 0xc5, 0x21, 0x7f, 0x12, 0x95, 0xdd, 0x4d, 0x77, 0x01, 0xfa, 0x71, 0x88, 0x2b, 0x7f],
    [0xdc, 0x9b, 0xc5, 0xa7, 0x6b, 0x84, 0x5c, 0x37, 0x7c, 0xec, 0x05, 0xa1, 0x9f, 0x91, 0x17, 0x3b],
    [0xea, 0xcf, 0xd9, 0x9b, 0x86, 0xcd, 0x2b, 0x43, 0x54, 0x45, 0x82, 0xc6, 0xfe, 0x73, 0x1a, 0x1a],
    [0x77, 0xb8, 0x1b, 0x90, 0xb4, 0xb7, 0x32, 0x76, 0x8f, 0x8a, 0x57, 0x06, 0xc7, 0xdd, 0x08, 0x90],
]

enclave_signature_expected = []

count = 0
start_time = time.time()

for key_index in range(len(keys)):
    key = bytes(keys[key_index])
    iv = bytes(enclave_signature_iv[key_index])
    data = bytes(enclave_signature_input[key_index])

    cipher = AES.new(key, AES.MODE_CBC, iv)
    cipher.block_size = 32
    encrypted_data = cipher.encrypt(data)

    signature = []
    for i in range(len(encrypted_data)):
        signature.append(hex(encrypted_data[i]))

    enclave_signature_expected.append(signature)

    count += 1

print(enclave_signature_expected)

elapsed_time = time.time() - start_time
print(f'Processed {count} keys in {elapsed_time:.2f} seconds')
start_time = time.time()
